package main

import (
	"bufio"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strings"
)

var mapPage pagination

var endpoints = map[string]string{
	"map": "https://pokeapi.co/api/v2/location/",
}
type cliCommand struct {
	name        string
	description string
	callback    func() error
}
type uriParam struct {
	name		string
	value		string
}
type pagination struct {
	next		string
	prev		string
}

type MapResponse struct {
	Count    int    `json:"count"`
	Next     string `json:"next"`
	Previous string    `json:"previous"`
	Results  []struct {
		Name string `json:"name"`
		URL  string `json:"url"`
	} `json:"results"`
}

func commandHelp() error{
	fmt.Println("Welcome to the Pokedex!")
	fmt.Println("Usage:")
	commands := getCommands()
	for _, val := range commands {
		fmt.Printf("%s: %s\n", val.name, val.description)
	}
	return nil
}
func commandExit() error {
	os.Exit(0)
	return nil
}
func mapF() error {
	var full_url string
	if mapPage.next == ""{
		full_url = endpoints["map"]
	} else {
		full_url = mapPage.next
	}
	res, err := http.Get(full_url)
	if err != nil {
		log.Fatal(err)
	}
	body, err := io.ReadAll(res.Body)
	res.Body.Close()
	if err != nil {
		log.Fatal(err)
	}
	if res.StatusCode > 299 {
		log.Fatalf("Response failed with status code: %d and\nbody: %s\n", res.StatusCode, body)
	}
	mapResponse := MapResponse{}
	err = json.Unmarshal(body, &mapResponse)
	if err != nil {
		log.Fatal(err)
	}
	mapPage.next = mapResponse.Next
	mapPage.prev = fmt.Sprintf("%v", mapResponse.Previous)
	for _,city := range mapResponse.Results {
		fmt.Println(city.Name)
	}
	return nil
}
func mapB() error {
	if mapPage.prev == "" {
		return errors.New("no previous page available")
	}
	full_url := buildUri(mapPage.prev, []uriParam{})
	res, err := http.Get(full_url)
	if err != nil {
		log.Fatal(err)
	}
	body, err := io.ReadAll(res.Body)
	res.Body.Close()
	if err != nil {
		log.Fatal(err)
	}
	if res.StatusCode > 299 {
		log.Fatalf("Response failed with status code: %d and\nbody: %s\n", res.StatusCode, body)
	}
	mapResponse := MapResponse{}
	err = json.Unmarshal(body, &mapResponse)
	if err != nil {
		log.Fatal(err)
	}
	mapPage.next = mapResponse.Next
	mapPage.prev = fmt.Sprintf("%v", mapResponse.Previous)
	for _,city := range mapResponse.Results {
		fmt.Println(city.Name)
	}
	return nil
}

func buildUri(endpoint string, params []uriParam)string{
	url := endpoint
	if len(params) == 0 {
		return url
	}
	url += "?"
	for i,p := range params{
		if i != 0 {
			url += "&"
		}
		url += p.name
		url += "="
		url += p.value
	}
	return url
}

func explore() error{
	return nil
}


func getCommands()map[string]cliCommand{
	return map[string]cliCommand{
		"help": {
			name:        "help",
			description: "Displays a help message",
			callback:    commandHelp,
		},
		"exit": {
			name:        "exit",
			description: "Exit the Pokedex",
			callback:    commandExit,
		},
		"map": {
			name: "map",
			description: "Get the next 20 locations",
			callback: mapF,
		},
		"mapb": {
			name: "mapb",
			description: "Get the previous 20 locations",
			callback: mapB,
		},
		"explore": {
			name: "explore",
			description: "Get pokemons in area",
			callback: explore,
		},
	}
}

func main() {
	reader := bufio.NewScanner(os.Stdin)
	commands := getCommands()
	for {
		fmt.Print("pokedex > ")
		if reader.Scan(){
			input := reader.Text()
			input = strings.TrimSpace(input)
			
			if _, ok := commands[input]; ok {
				if err := commands[input].callback(); err != nil {
					fmt.Println(err)
				}
			} else {
                fmt.Println("Unknown command:", input)
				commandHelp()
            }
		} else {
			fmt.Println("Error with the scanner")
			return
		}
	}
}